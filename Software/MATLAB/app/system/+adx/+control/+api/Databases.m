classdef Databases < adx.control.BaseClient
    % Databases No description provided
    %
    % Databases Properties:
    %
    %   serverUri           - Base URI to use when calling the API. Allows using a different server
    %                         than specified in the original API spec.
    %   httpOptions         - HTTPOptions used by all requests.
    %   preferredAuthMethod - If operation supports multiple authentication methods, specified which
    %                         method to prefer.
    %   bearerToken         - If Bearer token authentication is used, the token can be supplied 
    %                         here. Note the token is only used if operations are called for which
    %                         the API explicitly specified that Bearer authentication is supported.
    %                         If this has not been specified in the spec but most operations do 
    %                         require Bearer authentication, consider adding the relevant header to
    %                         all requests in the preSend method.
    %   apiKey              - If API key authentication is used, the key can be supplied here. 
    %                         Note the key is only used if operations are called for which
    %                         the API explicitly specified that API key authentication is supported.
    %                         If this has not been specified in the spec but most operations do 
    %                         require API key authentication, consider adding the API key to all
    %                         requests in the preSend method.
    %   httpCredentials     - If Basic or Digest authentication is supported username/password
    %                         credentials can be supplied here as matlab.net.http.Credentials. Note 
    %                         these are only actively used if operations are called for which the 
    %                         API spec has specified they require Basic authentication. If this has
    %                         not been specified in the spec but most operations do require
    %                         Basic authentication, consider setting the Credentials property in the
    %                         httpOptions rather than through httpCredentials.
    %   cookies             - Cookie jar. The cookie jar is shared across all Api classes in the 
    %                         same package. All responses are automatically parsed for Set-Cookie
    %                         headers and cookies are automatically added to the jar. Similarly
    %                         cookies are added to outgoing requests if there are matching cookies 
    %                         in the jar for the given request. Cookies can also be added manually
    %                         by calling the setCookies method on the cookies property. The cookie
    %                         jar is also saved to disk (cookies.mat in the same directory as 
    %                         BaseClient) and reloaded in new MATLAB sessions.
    %
    % Databases Methods:
    %
    %   Databases - Constructor
    %   databaseInviteFollower - 
    %   databasesAddPrincipals - 
    %   databasesCheckNameAvailability - 
    %   databasesCreateOrUpdate - 
    %   databasesDelete - 
    %   databasesGet - 
    %   databasesListByCluster - 
    %   databasesListPrincipals - 
    %   databasesRemovePrincipals - 
    %   databasesUpdate - 
    %
    % See Also: matlab.net.http.HTTPOptions, matlab.net.http.Credentials, 
    %   CookieJar.setCookies, control.BaseClient

    % This file is automatically generated using OpenAPI
    % Specification version: 2023-05-02
    % MATLAB Generator for OpenAPI version: 1.0.0
    % (c) 2023 MathWorks Inc.

    % Instruct MATLAB Code Analyzer to ignore unnecessary brackets
    %#ok<*NBRAK2> 

    % Class properties
    properties
    end

    % Class methods
    methods
        function obj = Databases(options)
            % Databases Constructor, creates a Databases instance.
            % When called without inputs, tries to load configuration
            % options from JSON file 'adx.Client.Settings.json'.
            % If this file is not present, the instance is initialized with 
            % default configuration option. An alternative configuration 
            % file can be provided through the "configFile" Name-Value pair.
            % All other properties of the instance can also be overridden 
            % using Name-Value pairs where Name equals the property name.
            % 
            % Examples:
            %
            %   % Create a client with default options and serverUri
            %   % as parsed from OpenAPI spec (if available)
            %   client = adx.control.api.Databases();
            %
            %   % Create a client for alternative server/base URI
            %   client = adx.control.api.Databases("serverUri","https://example.com:1234/api/");
            %
            %   % Create a client loading configuration options from 
            %   % JSON configuration file
            %   client = adx.control.api.Databases("configFile","myconfig.json");
            %
            %   % Create a client with alternative HTTPOptions and an API key
            %   client = adx.control.api.Databases("httpOptions",...
            %       matlab.net.http.HTTPOptions("ConnectTimeout",42),...
            %       "apiKey", "ABC123");

            arguments
                options.configFile string
                options.?adx.control.BaseClient
            end
            % Call base constructor to override any configured settings
            args = namedargs2cell(options);
            obj@adx.control.BaseClient(args{:})
        end

        function [code, result, response] = databaseInviteFollower(obj, subscriptionId, resourceGroupName, clusterName, databaseName, api_version, DatabaseInviteFollowerRequest)
            % databaseInviteFollower No summary provided
            % Generates an invitation token that allows attaching a follower database to this database.
            %
            % Required parameters:
            %   subscriptionId - The ID of the target subscription., Type: string
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   DatabaseInviteFollowerRequest - The follower invitation request parameters., Type: DatabaseInviteFollowerRequest
            %       Required properties in the model for this call:
            %           inviteeEmail
            %       Optional properties in the model for this call:
            %           tableLevelSharingProperties
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK.
            %   0: Error response describing why the operation failed.
            %
            % Returns: DatabaseInviteFollowerResult
            %
            % See Also: adx.control.models.DatabaseInviteFollowerResult

            arguments
              obj adx.control.api.Databases
              subscriptionId string
              resourceGroupName string
              clusterName string
              databaseName string
              api_version string
              DatabaseInviteFollowerRequest adx.control.models.DatabaseInviteFollowerRequest
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:databaseInviteFollower:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databaseInviteFollower")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:databaseInviteFollower:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databaseInviteFollower")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/inviteFollower";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
                "inviteeEmail",...
            ];
            optionalProperties = [...
                "tableLevelSharingProperties",...
            ];
            request.Body(1).Payload = DatabaseInviteFollowerRequest.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("databaseInviteFollower", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("databaseInviteFollower", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.DatabaseInviteFollowerResult(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % databaseInviteFollower method

        function [code, result, response] = databasesAddPrincipals(obj, resourceGroupName, clusterName, databaseName, subscriptionId, api_version, DatabasePrincipalListRequest)
            % databasesAddPrincipals No summary provided
            % Add Database principals permissions.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   DatabasePrincipalListRequest - List of database principals to add., Type: DatabasePrincipalListRequest
            %       Required properties in the model for this call:
            %       Optional properties in the model for this call:
            %           value
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK -- Successfully added the list of database principals. Returns the updated list of principals.
            %   0: Error response describing why the operation failed.
            %
            % Returns: DatabasePrincipalListResult
            %
            % See Also: adx.control.models.DatabasePrincipalListResult

            arguments
              obj adx.control.api.Databases
              resourceGroupName string
              clusterName string
              databaseName string
              subscriptionId string
              api_version string
              DatabasePrincipalListRequest adx.control.models.DatabasePrincipalListRequest
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:databasesAddPrincipals:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databasesAddPrincipals")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:databasesAddPrincipals:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databasesAddPrincipals")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/addPrincipals";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
            ];
            optionalProperties = [...
                "value",...
            ];
            request.Body(1).Payload = DatabasePrincipalListRequest.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("databasesAddPrincipals", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("databasesAddPrincipals", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.DatabasePrincipalListResult(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % databasesAddPrincipals method

        function [code, result, response] = databasesCheckNameAvailability(obj, resourceGroupName, clusterName, api_version, subscriptionId, CheckNameRequest)
            % databasesCheckNameAvailability No summary provided
            % Checks that the databases resource name is valid and is not already in use.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   CheckNameRequest - The name of the resource., Type: CheckNameRequest
            %       Required properties in the model for this call:
            %           name
            %           type
            %       Optional properties in the model for this call:
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK -- Operation to check the kusto resource name availability was successful.
            %   0: Error response describing why the operation failed.
            %
            % Returns: CheckNameResult
            %
            % See Also: adx.control.models.CheckNameResult

            arguments
              obj adx.control.api.Databases
              resourceGroupName string
              clusterName string
              api_version string
              subscriptionId string
              CheckNameRequest adx.control.models.CheckNameRequest
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:databasesCheckNameAvailability:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databasesCheckNameAvailability")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:databasesCheckNameAvailability:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databasesCheckNameAvailability")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/checkNameAvailability";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
                "name",...
                "type",...
            ];
            optionalProperties = [...
            ];
            request.Body(1).Payload = CheckNameRequest.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("databasesCheckNameAvailability", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("databasesCheckNameAvailability", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.CheckNameResult(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % databasesCheckNameAvailability method

        function [code, result, response] = databasesCreateOrUpdate(obj, resourceGroupName, clusterName, databaseName, subscriptionId, api_version, Database, optionals)
            % databasesCreateOrUpdate No summary provided
            % Creates or updates a database.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   Database - The database parameters supplied to the CreateOrUpdate operation., Type: Database
            %       Required properties in the model for this call:
            %           kind
            %       Optional properties in the model for this call:
            %           location
            %
            % Optional name-value parameters:
            %   callerRole - By default, any user who run operation on a database become an Admin on it. This property allows the caller to exclude the caller from Admins list., Type: string
            %
            % Responses:
            %   200: Successfully updated the database.
            %   201: Successfully created the database.
            %   202: Accepted the create database request.
            %   0: Error response describing why the operation failed.
            %
            % Returns: Database
            %
            % See Also: adx.control.models.Database

            arguments
              obj adx.control.api.Databases
              resourceGroupName string
              clusterName string
              databaseName string
              subscriptionId string
              api_version string
              Database adx.control.models.Database
              optionals.callerRole string { mustBeMember(optionals.callerRole,["Admin","None"]) }
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:databasesCreateOrUpdate:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databasesCreateOrUpdate")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:databasesCreateOrUpdate:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databasesCreateOrUpdate")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            if isfield(optionals, "callerRole"), uri.Query(end+1) = matlab.net.QueryParameter("callerRole", optionals.callerRole); end
            
            % Set JSON Body
            requiredProperties = [...
                "kind",...
            ];
            optionalProperties = [...
                "location",...
            ];
            request.Body(1).Payload = Database.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("databasesCreateOrUpdate", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("databasesCreateOrUpdate", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.Database(response.Body.Data);
                    if startsWith("ReadOnlyFollowingDatabase",string(result.kind))
                        result = adx.control.models.ReadOnlyFollowingDatabase(response.Body.Data);
                        return
                    end

                    if startsWith("ReadWriteDatabase",string(result.kind))
                        result = adx.control.models.ReadWriteDatabase(response.Body.Data);
                        return
                    end

                case 201
                    result = adx.control.models.Database(response.Body.Data);
                    if startsWith("ReadOnlyFollowingDatabase",string(result.kind))
                        result = adx.control.models.ReadOnlyFollowingDatabase(response.Body.Data);
                        return
                    end

                    if startsWith("ReadWriteDatabase",string(result.kind))
                        result = adx.control.models.ReadWriteDatabase(response.Body.Data);
                        return
                    end

                case 202
                    result = adx.control.models.Database(response.Body.Data);
                    if startsWith("ReadOnlyFollowingDatabase",string(result.kind))
                        result = adx.control.models.ReadOnlyFollowingDatabase(response.Body.Data);
                        return
                    end

                    if startsWith("ReadWriteDatabase",string(result.kind))
                        result = adx.control.models.ReadWriteDatabase(response.Body.Data);
                        return
                    end

                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % databasesCreateOrUpdate method

        function [code, result, response] = databasesDelete(obj, resourceGroupName, clusterName, databaseName, subscriptionId, api_version)
            % databasesDelete No summary provided
            % Deletes the database with the given name.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successfully deleted the database.
            %   202: Accepted.
            %   204: The specified database does not exist.
            %   0: Error response describing why the operation failed.
            %
            % Returns: 
            %
            % See Also: adx.control.models.

            arguments
              obj adx.control.api.Databases
              resourceGroupName string
              clusterName string
              databaseName string
              subscriptionId string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:databasesDelete:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databasesDelete")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('DELETE');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("databasesDelete", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("databasesDelete", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 202
                    result = response.Body.Data;
                case 204
                    result = response.Body.Data;
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % databasesDelete method

        function [code, result, response] = databasesGet(obj, resourceGroupName, clusterName, databaseName, subscriptionId, api_version)
            % databasesGet No summary provided
            % Returns a database.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successfully retrieved the specified database.
            %   0: Error response describing why the operation failed.
            %
            % Returns: Database
            %
            % See Also: adx.control.models.Database

            arguments
              obj adx.control.api.Databases
              resourceGroupName string
              clusterName string
              databaseName string
              subscriptionId string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:databasesGet:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databasesGet")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("databasesGet", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("databasesGet", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.Database(response.Body.Data);
                    if startsWith("ReadOnlyFollowingDatabase",string(result.kind))
                        result = adx.control.models.ReadOnlyFollowingDatabase(response.Body.Data);
                        return
                    end

                    if startsWith("ReadWriteDatabase",string(result.kind))
                        result = adx.control.models.ReadWriteDatabase(response.Body.Data);
                        return
                    end

                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % databasesGet method

        function [code, result, response] = databasesListByCluster(obj, resourceGroupName, clusterName, subscriptionId, api_version, optionals)
            % databasesListByCluster No summary provided
            % Returns the list of databases of the given Kusto cluster.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % Optional name-value parameters:
            %   top - limit the number of results, Type: int32, Format: int32
            %   skiptoken - Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls., Type: string
            %
            % Responses:
            %   200: Successfully retrieved the list of databases.
            %   0: Error response describing why the operation failed.
            %
            % Returns: DatabaseListResult
            %
            % See Also: adx.control.models.DatabaseListResult

            arguments
              obj adx.control.api.Databases
              resourceGroupName string
              clusterName string
              subscriptionId string
              api_version string
              optionals.top int32
              optionals.skiptoken string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:databasesListByCluster:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databasesListByCluster")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            if isfield(optionals, "top"), uri.Query(end+1) = matlab.net.QueryParameter("$top", optionals.top); end
            if isfield(optionals, "skiptoken"), uri.Query(end+1) = matlab.net.QueryParameter("$skiptoken", optionals.skiptoken); end
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("databasesListByCluster", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("databasesListByCluster", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.DatabaseListResult(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % databasesListByCluster method

        function [code, result, response] = databasesListPrincipals(obj, resourceGroupName, clusterName, databaseName, subscriptionId, api_version)
            % databasesListPrincipals No summary provided
            % Returns a list of database principals of the given Kusto cluster and database.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successfully retrieved the list of database principals.
            %   0: Error response describing why the operation failed.
            %
            % Returns: DatabasePrincipalListResult
            %
            % See Also: adx.control.models.DatabasePrincipalListResult

            arguments
              obj adx.control.api.Databases
              resourceGroupName string
              clusterName string
              databaseName string
              subscriptionId string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:databasesListPrincipals:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databasesListPrincipals")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/listPrincipals";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("databasesListPrincipals", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("databasesListPrincipals", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.DatabasePrincipalListResult(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % databasesListPrincipals method

        function [code, result, response] = databasesRemovePrincipals(obj, resourceGroupName, clusterName, databaseName, subscriptionId, api_version, DatabasePrincipalListRequest)
            % databasesRemovePrincipals No summary provided
            % Remove Database principals permissions.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   DatabasePrincipalListRequest - List of database principals to remove., Type: DatabasePrincipalListRequest
            %       Required properties in the model for this call:
            %       Optional properties in the model for this call:
            %           value
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK -- Successfully removed the list of database principals. Returns the updated list of principals.
            %   0: Error response describing why the operation failed.
            %
            % Returns: DatabasePrincipalListResult
            %
            % See Also: adx.control.models.DatabasePrincipalListResult

            arguments
              obj adx.control.api.Databases
              resourceGroupName string
              clusterName string
              databaseName string
              subscriptionId string
              api_version string
              DatabasePrincipalListRequest adx.control.models.DatabasePrincipalListRequest
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:databasesRemovePrincipals:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databasesRemovePrincipals")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:databasesRemovePrincipals:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databasesRemovePrincipals")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/removePrincipals";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
            ];
            optionalProperties = [...
                "value",...
            ];
            request.Body(1).Payload = DatabasePrincipalListRequest.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("databasesRemovePrincipals", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("databasesRemovePrincipals", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.DatabasePrincipalListResult(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % databasesRemovePrincipals method

        function [code, result, response] = databasesUpdate(obj, resourceGroupName, clusterName, databaseName, subscriptionId, api_version, Database, optionals)
            % databasesUpdate No summary provided
            % Updates a database.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   Database - The database parameters supplied to the Update operation., Type: Database
            %       Required properties in the model for this call:
            %           kind
            %       Optional properties in the model for this call:
            %           location
            %
            % Optional name-value parameters:
            %   callerRole - By default, any user who run operation on a database become an Admin on it. This property allows the caller to exclude the caller from Admins list., Type: string
            %
            % Responses:
            %   200: Successfully updated the database.
            %   201: Successfully updated the database.
            %   202: Accepted the update database request.
            %   0: Error response describing why the operation failed.
            %
            % Returns: Database
            %
            % See Also: adx.control.models.Database

            arguments
              obj adx.control.api.Databases
              resourceGroupName string
              clusterName string
              databaseName string
              subscriptionId string
              api_version string
              Database adx.control.models.Database
              optionals.callerRole string { mustBeMember(optionals.callerRole,["Admin","None"]) }
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:databasesUpdate:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databasesUpdate")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:databasesUpdate:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","databasesUpdate")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PATCH');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            if isfield(optionals, "callerRole"), uri.Query(end+1) = matlab.net.QueryParameter("callerRole", optionals.callerRole); end
            
            % Set JSON Body
            requiredProperties = [...
                "kind",...
            ];
            optionalProperties = [...
                "location",...
            ];
            request.Body(1).Payload = Database.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("databasesUpdate", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("databasesUpdate", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.Database(response.Body.Data);
                    if startsWith("ReadOnlyFollowingDatabase",string(result.kind))
                        result = adx.control.models.ReadOnlyFollowingDatabase(response.Body.Data);
                        return
                    end

                    if startsWith("ReadWriteDatabase",string(result.kind))
                        result = adx.control.models.ReadWriteDatabase(response.Body.Data);
                        return
                    end

                case 201
                    result = adx.control.models.Database(response.Body.Data);
                    if startsWith("ReadOnlyFollowingDatabase",string(result.kind))
                        result = adx.control.models.ReadOnlyFollowingDatabase(response.Body.Data);
                        return
                    end

                    if startsWith("ReadWriteDatabase",string(result.kind))
                        result = adx.control.models.ReadWriteDatabase(response.Body.Data);
                        return
                    end

                case 202
                    result = adx.control.models.Database(response.Body.Data);
                    if startsWith("ReadOnlyFollowingDatabase",string(result.kind))
                        result = adx.control.models.ReadOnlyFollowingDatabase(response.Body.Data);
                        return
                    end

                    if startsWith("ReadWriteDatabase",string(result.kind))
                        result = adx.control.models.ReadWriteDatabase(response.Body.Data);
                        return
                    end

                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % databasesUpdate method

    end %methods
end %class


