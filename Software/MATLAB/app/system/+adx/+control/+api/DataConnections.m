classdef DataConnections < adx.control.BaseClient
    % DataConnections No description provided
    %
    % DataConnections Properties:
    %
    %   serverUri           - Base URI to use when calling the API. Allows using a different server
    %                         than specified in the original API spec.
    %   httpOptions         - HTTPOptions used by all requests.
    %   preferredAuthMethod - If operation supports multiple authentication methods, specified which
    %                         method to prefer.
    %   bearerToken         - If Bearer token authentication is used, the token can be supplied 
    %                         here. Note the token is only used if operations are called for which
    %                         the API explicitly specified that Bearer authentication is supported.
    %                         If this has not been specified in the spec but most operations do 
    %                         require Bearer authentication, consider adding the relevant header to
    %                         all requests in the preSend method.
    %   apiKey              - If API key authentication is used, the key can be supplied here. 
    %                         Note the key is only used if operations are called for which
    %                         the API explicitly specified that API key authentication is supported.
    %                         If this has not been specified in the spec but most operations do 
    %                         require API key authentication, consider adding the API key to all
    %                         requests in the preSend method.
    %   httpCredentials     - If Basic or Digest authentication is supported username/password
    %                         credentials can be supplied here as matlab.net.http.Credentials. Note 
    %                         these are only actively used if operations are called for which the 
    %                         API spec has specified they require Basic authentication. If this has
    %                         not been specified in the spec but most operations do require
    %                         Basic authentication, consider setting the Credentials property in the
    %                         httpOptions rather than through httpCredentials.
    %   cookies             - Cookie jar. The cookie jar is shared across all Api classes in the 
    %                         same package. All responses are automatically parsed for Set-Cookie
    %                         headers and cookies are automatically added to the jar. Similarly
    %                         cookies are added to outgoing requests if there are matching cookies 
    %                         in the jar for the given request. Cookies can also be added manually
    %                         by calling the setCookies method on the cookies property. The cookie
    %                         jar is also saved to disk (cookies.mat in the same directory as 
    %                         BaseClient) and reloaded in new MATLAB sessions.
    %
    % DataConnections Methods:
    %
    %   DataConnections - Constructor
    %   dataConnectionsCheckNameAvailability - 
    %   dataConnectionsCreateOrUpdate - 
    %   dataConnectionsDataConnectionValidation - 
    %   dataConnectionsDelete - 
    %   dataConnectionsGet - 
    %   dataConnectionsListByDatabase - 
    %   dataConnectionsUpdate - 
    %
    % See Also: matlab.net.http.HTTPOptions, matlab.net.http.Credentials, 
    %   CookieJar.setCookies, control.BaseClient

    % This file is automatically generated using OpenAPI
    % Specification version: 2023-05-02
    % MATLAB Generator for OpenAPI version: 1.0.0
    % (c) 2023 MathWorks Inc.

    % Instruct MATLAB Code Analyzer to ignore unnecessary brackets
    %#ok<*NBRAK2> 

    % Class properties
    properties
    end

    % Class methods
    methods
        function obj = DataConnections(options)
            % DataConnections Constructor, creates a DataConnections instance.
            % When called without inputs, tries to load configuration
            % options from JSON file 'adx.Client.Settings.json'.
            % If this file is not present, the instance is initialized with 
            % default configuration option. An alternative configuration 
            % file can be provided through the "configFile" Name-Value pair.
            % All other properties of the instance can also be overridden 
            % using Name-Value pairs where Name equals the property name.
            % 
            % Examples:
            %
            %   % Create a client with default options and serverUri
            %   % as parsed from OpenAPI spec (if available)
            %   client = adx.control.api.DataConnections();
            %
            %   % Create a client for alternative server/base URI
            %   client = adx.control.api.DataConnections("serverUri","https://example.com:1234/api/");
            %
            %   % Create a client loading configuration options from 
            %   % JSON configuration file
            %   client = adx.control.api.DataConnections("configFile","myconfig.json");
            %
            %   % Create a client with alternative HTTPOptions and an API key
            %   client = adx.control.api.DataConnections("httpOptions",...
            %       matlab.net.http.HTTPOptions("ConnectTimeout",42),...
            %       "apiKey", "ABC123");

            arguments
                options.configFile string
                options.?adx.control.BaseClient
            end
            % Call base constructor to override any configured settings
            args = namedargs2cell(options);
            obj@adx.control.BaseClient(args{:})
        end

        function [code, result, response] = dataConnectionsCheckNameAvailability(obj, resourceGroupName, clusterName, databaseName, api_version, subscriptionId, DataConnectionCheckNameRequest)
            % dataConnectionsCheckNameAvailability No summary provided
            % Checks that the data connection name is valid and is not already in use.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   DataConnectionCheckNameRequest - The name of the data connection., Type: DataConnectionCheckNameRequest
            %       Required properties in the model for this call:
            %           name
            %           type
            %       Optional properties in the model for this call:
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK -- Operation to check the Kusto resource name availability was successful.
            %   0: Error response describing why the operation failed.
            %
            % Returns: CheckNameResult
            %
            % See Also: adx.control.models.CheckNameResult

            arguments
              obj adx.control.api.DataConnections
              resourceGroupName string
              clusterName string
              databaseName string
              api_version string
              subscriptionId string
              DataConnectionCheckNameRequest adx.control.models.DataConnectionCheckNameRequest
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:dataConnectionsCheckNameAvailability:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","dataConnectionsCheckNameAvailability")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:dataConnectionsCheckNameAvailability:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","dataConnectionsCheckNameAvailability")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/checkNameAvailability";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
                "name",...
                "type",...
            ];
            optionalProperties = [...
            ];
            request.Body(1).Payload = DataConnectionCheckNameRequest.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("dataConnectionsCheckNameAvailability", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("dataConnectionsCheckNameAvailability", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.CheckNameResult(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % dataConnectionsCheckNameAvailability method

        function [code, result, response] = dataConnectionsCreateOrUpdate(obj, resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, api_version, DataConnection)
            % dataConnectionsCreateOrUpdate No summary provided
            % Creates or updates a data connection.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   dataConnectionName - The name of the data connection., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   DataConnection - The data connection parameters supplied to the CreateOrUpdate operation., Type: DataConnection
            %       Required properties in the model for this call:
            %           kind
            %       Optional properties in the model for this call:
            %           location
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successfully updated the data connection.
            %   201: Successfully created the data connection.
            %   202: Accepted the create data connection request.
            %   0: Error response describing why the operation failed.
            %
            % Returns: DataConnection
            %
            % See Also: adx.control.models.DataConnection

            arguments
              obj adx.control.api.DataConnections
              resourceGroupName string
              clusterName string
              databaseName string
              dataConnectionName string
              subscriptionId string
              api_version string
              DataConnection adx.control.models.DataConnection
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:dataConnectionsCreateOrUpdate:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","dataConnectionsCreateOrUpdate")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:dataConnectionsCreateOrUpdate:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","dataConnectionsCreateOrUpdate")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;
            uri.Path(uri.Path == "{" + "dataConnectionName" +"}") = dataConnectionName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
                "kind",...
            ];
            optionalProperties = [...
                "location",...
            ];
            request.Body(1).Payload = DataConnection.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("dataConnectionsCreateOrUpdate", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("dataConnectionsCreateOrUpdate", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.DataConnection(response.Body.Data);
                    if startsWith("CosmosDbDataConnection",string(result.kind))
                        result = adx.control.models.CosmosDbDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("EventGridDataConnection",string(result.kind))
                        result = adx.control.models.EventGridDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("EventHubDataConnection",string(result.kind))
                        result = adx.control.models.EventHubDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("IotHubDataConnection",string(result.kind))
                        result = adx.control.models.IotHubDataConnection(response.Body.Data);
                        return
                    end

                case 201
                    result = adx.control.models.DataConnection(response.Body.Data);
                    if startsWith("CosmosDbDataConnection",string(result.kind))
                        result = adx.control.models.CosmosDbDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("EventGridDataConnection",string(result.kind))
                        result = adx.control.models.EventGridDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("EventHubDataConnection",string(result.kind))
                        result = adx.control.models.EventHubDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("IotHubDataConnection",string(result.kind))
                        result = adx.control.models.IotHubDataConnection(response.Body.Data);
                        return
                    end

                case 202
                    result = adx.control.models.DataConnection(response.Body.Data);
                    if startsWith("CosmosDbDataConnection",string(result.kind))
                        result = adx.control.models.CosmosDbDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("EventGridDataConnection",string(result.kind))
                        result = adx.control.models.EventGridDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("EventHubDataConnection",string(result.kind))
                        result = adx.control.models.EventHubDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("IotHubDataConnection",string(result.kind))
                        result = adx.control.models.IotHubDataConnection(response.Body.Data);
                        return
                    end

                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % dataConnectionsCreateOrUpdate method

        function [code, result, response] = dataConnectionsDataConnectionValidation(obj, resourceGroupName, clusterName, databaseName, api_version, subscriptionId, DataConnectionValidation)
            % dataConnectionsDataConnectionValidation No summary provided
            % Checks that the data connection parameters are valid.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   DataConnectionValidation - The data connection parameters supplied to the CreateOrUpdate operation., Type: DataConnectionValidation
            %       Required properties in the model for this call:
            %       Optional properties in the model for this call:
            %           dataConnectionName
            %           xproperties
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK -- Operation to check the kusto resource name availability was successful.
            %   202: Accepted
            %   0: Error response describing why the operation failed.
            %
            % Returns: DataConnectionValidationListResult
            %
            % See Also: adx.control.models.DataConnectionValidationListResult

            arguments
              obj adx.control.api.DataConnections
              resourceGroupName string
              clusterName string
              databaseName string
              api_version string
              subscriptionId string
              DataConnectionValidation adx.control.models.DataConnectionValidation
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:dataConnectionsDataConnectionValidation:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","dataConnectionsDataConnectionValidation")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:dataConnectionsDataConnectionValidation:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","dataConnectionsDataConnectionValidation")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnectionValidation";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
            ];
            optionalProperties = [...
                "dataConnectionName",...
                "xproperties",...
            ];
            request.Body(1).Payload = DataConnectionValidation.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("dataConnectionsDataConnectionValidation", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("dataConnectionsDataConnectionValidation", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.DataConnectionValidationListResult(response.Body.Data);
                case 202
                    result = response.Body.Data;
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % dataConnectionsDataConnectionValidation method

        function [code, result, response] = dataConnectionsDelete(obj, resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, api_version)
            % dataConnectionsDelete No summary provided
            % Deletes the data connection with the given name.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   dataConnectionName - The name of the data connection., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successfully deleted the data connection.
            %   202: Accepted.
            %   204: The specified data connection does not exist.
            %   0: Error response describing why the operation failed.
            %
            % Returns: 
            %
            % See Also: adx.control.models.

            arguments
              obj adx.control.api.DataConnections
              resourceGroupName string
              clusterName string
              databaseName string
              dataConnectionName string
              subscriptionId string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:dataConnectionsDelete:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","dataConnectionsDelete")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('DELETE');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;
            uri.Path(uri.Path == "{" + "dataConnectionName" +"}") = dataConnectionName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("dataConnectionsDelete", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("dataConnectionsDelete", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 202
                    result = response.Body.Data;
                case 204
                    result = response.Body.Data;
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % dataConnectionsDelete method

        function [code, result, response] = dataConnectionsGet(obj, resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, api_version)
            % dataConnectionsGet No summary provided
            % Returns a data connection.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   dataConnectionName - The name of the data connection., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successfully retrieved the specified data connection.
            %   0: Error response describing why the operation failed.
            %
            % Returns: DataConnection
            %
            % See Also: adx.control.models.DataConnection

            arguments
              obj adx.control.api.DataConnections
              resourceGroupName string
              clusterName string
              databaseName string
              dataConnectionName string
              subscriptionId string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:dataConnectionsGet:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","dataConnectionsGet")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;
            uri.Path(uri.Path == "{" + "dataConnectionName" +"}") = dataConnectionName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("dataConnectionsGet", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("dataConnectionsGet", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.DataConnection(response.Body.Data);
                    if startsWith("CosmosDbDataConnection",string(result.kind))
                        result = adx.control.models.CosmosDbDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("EventGridDataConnection",string(result.kind))
                        result = adx.control.models.EventGridDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("EventHubDataConnection",string(result.kind))
                        result = adx.control.models.EventHubDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("IotHubDataConnection",string(result.kind))
                        result = adx.control.models.IotHubDataConnection(response.Body.Data);
                        return
                    end

                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % dataConnectionsGet method

        function [code, result, response] = dataConnectionsListByDatabase(obj, resourceGroupName, clusterName, databaseName, subscriptionId, api_version)
            % dataConnectionsListByDatabase No summary provided
            % Returns the list of data connections of the given Kusto database.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successfully retrieved the list of data connections.
            %   0: Error response describing why the operation failed.
            %
            % Returns: DataConnectionListResult
            %
            % See Also: adx.control.models.DataConnectionListResult

            arguments
              obj adx.control.api.DataConnections
              resourceGroupName string
              clusterName string
              databaseName string
              subscriptionId string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:dataConnectionsListByDatabase:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","dataConnectionsListByDatabase")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("dataConnectionsListByDatabase", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("dataConnectionsListByDatabase", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.DataConnectionListResult(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % dataConnectionsListByDatabase method

        function [code, result, response] = dataConnectionsUpdate(obj, resourceGroupName, clusterName, databaseName, dataConnectionName, subscriptionId, api_version, DataConnection)
            % dataConnectionsUpdate No summary provided
            % Updates a data connection.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   databaseName - The name of the database in the Kusto cluster., Type: string
            %   dataConnectionName - The name of the data connection., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   DataConnection - The data connection parameters supplied to the Update operation., Type: DataConnection
            %       Required properties in the model for this call:
            %           kind
            %       Optional properties in the model for this call:
            %           location
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successfully updated the data connection.
            %   201: Successfully updated the data connection.
            %   202: Accepted the update data connection request.
            %   0: Error response describing why the operation failed.
            %
            % Returns: DataConnection
            %
            % See Also: adx.control.models.DataConnection

            arguments
              obj adx.control.api.DataConnections
              resourceGroupName string
              clusterName string
              databaseName string
              dataConnectionName string
              subscriptionId string
              api_version string
              DataConnection adx.control.models.DataConnection
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:dataConnectionsUpdate:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","dataConnectionsUpdate")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:dataConnectionsUpdate:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","dataConnectionsUpdate")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PATCH');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/dataConnections/{dataConnectionName}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "databaseName" +"}") = databaseName;
            uri.Path(uri.Path == "{" + "dataConnectionName" +"}") = dataConnectionName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
                "kind",...
            ];
            optionalProperties = [...
                "location",...
            ];
            request.Body(1).Payload = DataConnection.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("dataConnectionsUpdate", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("dataConnectionsUpdate", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.DataConnection(response.Body.Data);
                    if startsWith("CosmosDbDataConnection",string(result.kind))
                        result = adx.control.models.CosmosDbDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("EventGridDataConnection",string(result.kind))
                        result = adx.control.models.EventGridDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("EventHubDataConnection",string(result.kind))
                        result = adx.control.models.EventHubDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("IotHubDataConnection",string(result.kind))
                        result = adx.control.models.IotHubDataConnection(response.Body.Data);
                        return
                    end

                case 201
                    result = adx.control.models.DataConnection(response.Body.Data);
                    if startsWith("CosmosDbDataConnection",string(result.kind))
                        result = adx.control.models.CosmosDbDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("EventGridDataConnection",string(result.kind))
                        result = adx.control.models.EventGridDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("EventHubDataConnection",string(result.kind))
                        result = adx.control.models.EventHubDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("IotHubDataConnection",string(result.kind))
                        result = adx.control.models.IotHubDataConnection(response.Body.Data);
                        return
                    end

                case 202
                    result = adx.control.models.DataConnection(response.Body.Data);
                    if startsWith("CosmosDbDataConnection",string(result.kind))
                        result = adx.control.models.CosmosDbDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("EventGridDataConnection",string(result.kind))
                        result = adx.control.models.EventGridDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("EventHubDataConnection",string(result.kind))
                        result = adx.control.models.EventHubDataConnection(response.Body.Data);
                        return
                    end

                    if startsWith("IotHubDataConnection",string(result.kind))
                        result = adx.control.models.IotHubDataConnection(response.Body.Data);
                        return
                    end

                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % dataConnectionsUpdate method

    end %methods
end %class


