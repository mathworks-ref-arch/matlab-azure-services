classdef Clusters < adx.control.BaseClient
    % Clusters No description provided
    %
    % Clusters Properties:
    %
    %   serverUri           - Base URI to use when calling the API. Allows using a different server
    %                         than specified in the original API spec.
    %   httpOptions         - HTTPOptions used by all requests.
    %   preferredAuthMethod - If operation supports multiple authentication methods, specified which
    %                         method to prefer.
    %   bearerToken         - If Bearer token authentication is used, the token can be supplied 
    %                         here. Note the token is only used if operations are called for which
    %                         the API explicitly specified that Bearer authentication is supported.
    %                         If this has not been specified in the spec but most operations do 
    %                         require Bearer authentication, consider adding the relevant header to
    %                         all requests in the preSend method.
    %   apiKey              - If API key authentication is used, the key can be supplied here. 
    %                         Note the key is only used if operations are called for which
    %                         the API explicitly specified that API key authentication is supported.
    %                         If this has not been specified in the spec but most operations do 
    %                         require API key authentication, consider adding the API key to all
    %                         requests in the preSend method.
    %   httpCredentials     - If Basic or Digest authentication is supported username/password
    %                         credentials can be supplied here as matlab.net.http.Credentials. Note 
    %                         these are only actively used if operations are called for which the 
    %                         API spec has specified they require Basic authentication. If this has
    %                         not been specified in the spec but most operations do require
    %                         Basic authentication, consider setting the Credentials property in the
    %                         httpOptions rather than through httpCredentials.
    %   cookies             - Cookie jar. The cookie jar is shared across all Api classes in the 
    %                         same package. All responses are automatically parsed for Set-Cookie
    %                         headers and cookies are automatically added to the jar. Similarly
    %                         cookies are added to outgoing requests if there are matching cookies 
    %                         in the jar for the given request. Cookies can also be added manually
    %                         by calling the setCookies method on the cookies property. The cookie
    %                         jar is also saved to disk (cookies.mat in the same directory as 
    %                         BaseClient) and reloaded in new MATLAB sessions.
    %
    % Clusters Methods:
    %
    %   Clusters - Constructor
    %   clustersAddLanguageExtensions - 
    %   clustersCheckNameAvailability - 
    %   clustersCreateOrUpdate - 
    %   clustersDelete - 
    %   clustersDetachFollowerDatabases - 
    %   clustersDiagnoseVirtualNetwork - 
    %   clustersGet - 
    %   clustersList - 
    %   clustersListByResourceGroup - 
    %   clustersListFollowerDatabases - 
    %   clustersListLanguageExtensions - 
    %   clustersListSkusByResource - 
    %   clustersMigrate - 
    %   clustersRemoveLanguageExtensions - 
    %   clustersStart - 
    %   clustersStop - 
    %   clustersUpdate - 
    %
    % See Also: matlab.net.http.HTTPOptions, matlab.net.http.Credentials, 
    %   CookieJar.setCookies, control.BaseClient

    % This file is automatically generated using OpenAPI
    % Specification version: 2023-05-02
    % MATLAB Generator for OpenAPI version: 1.0.0
    % (c) 2023 MathWorks Inc.

    % Instruct MATLAB Code Analyzer to ignore unnecessary brackets
    %#ok<*NBRAK2> 

    % Class properties
    properties
    end

    % Class methods
    methods
        function obj = Clusters(options)
            % Clusters Constructor, creates a Clusters instance.
            % When called without inputs, tries to load configuration
            % options from JSON file 'adx.Client.Settings.json'.
            % If this file is not present, the instance is initialized with 
            % default configuration option. An alternative configuration 
            % file can be provided through the "configFile" Name-Value pair.
            % All other properties of the instance can also be overridden 
            % using Name-Value pairs where Name equals the property name.
            % 
            % Examples:
            %
            %   % Create a client with default options and serverUri
            %   % as parsed from OpenAPI spec (if available)
            %   client = adx.control.api.Clusters();
            %
            %   % Create a client for alternative server/base URI
            %   client = adx.control.api.Clusters("serverUri","https://example.com:1234/api/");
            %
            %   % Create a client loading configuration options from 
            %   % JSON configuration file
            %   client = adx.control.api.Clusters("configFile","myconfig.json");
            %
            %   % Create a client with alternative HTTPOptions and an API key
            %   client = adx.control.api.Clusters("httpOptions",...
            %       matlab.net.http.HTTPOptions("ConnectTimeout",42),...
            %       "apiKey", "ABC123");

            arguments
                options.configFile string
                options.?adx.control.BaseClient
            end
            % Call base constructor to override any configured settings
            args = namedargs2cell(options);
            obj@adx.control.BaseClient(args{:})
        end

        function [code, result, response] = clustersAddLanguageExtensions(obj, subscriptionId, resourceGroupName, clusterName, api_version, LanguageExtensionsList)
            % clustersAddLanguageExtensions No summary provided
            % Add a list of language extensions that can run within KQL queries.
            %
            % Required parameters:
            %   subscriptionId - The ID of the target subscription., Type: string
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   LanguageExtensionsList - The language extensions to add., Type: LanguageExtensionsList
            %       Required properties in the model for this call:
            %       Optional properties in the model for this call:
            %           value
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK.
            %   202: Accepted
            %   0: Error response describing why the operation failed.
            %
            % Returns: 
            %
            % See Also: adx.control.models.

            arguments
              obj adx.control.api.Clusters
              subscriptionId string
              resourceGroupName string
              clusterName string
              api_version string
              LanguageExtensionsList adx.control.models.LanguageExtensionsList
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersAddLanguageExtensions:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersAddLanguageExtensions")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:clustersAddLanguageExtensions:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersAddLanguageExtensions")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/addLanguageExtensions";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
            ];
            optionalProperties = [...
                "value",...
            ];
            request.Body(1).Payload = LanguageExtensionsList.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersAddLanguageExtensions", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersAddLanguageExtensions", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 202
                    result = response.Body.Data;
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersAddLanguageExtensions method

        function [code, result, response] = clustersCheckNameAvailability(obj, api_version, subscriptionId, location, ClusterCheckNameRequest)
            % clustersCheckNameAvailability No summary provided
            % Checks that the cluster name is valid and is not already in use.
            %
            % Required parameters:
            %   api_version - The API version to use for this operation., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   location - The name of Azure region., Type: string
            %   ClusterCheckNameRequest - The name of the cluster., Type: ClusterCheckNameRequest
            %       Required properties in the model for this call:
            %           name
            %           type
            %       Optional properties in the model for this call:
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK -- Operation to check the kusto resource name availability was successful.
            %   0: Error response describing why the operation failed.
            %
            % Returns: CheckNameResult
            %
            % See Also: adx.control.models.CheckNameResult

            arguments
              obj adx.control.api.Clusters
              api_version string
              subscriptionId string
              location string
              ClusterCheckNameRequest adx.control.models.ClusterCheckNameRequest
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersCheckNameAvailability:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersCheckNameAvailability")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:clustersCheckNameAvailability:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersCheckNameAvailability")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/providers/Microsoft.Kusto/locations/{location}/checkNameAvailability";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;
            uri.Path(uri.Path == "{" + "location" +"}") = location;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
                "name",...
                "type",...
            ];
            optionalProperties = [...
            ];
            request.Body(1).Payload = ClusterCheckNameRequest.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersCheckNameAvailability", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersCheckNameAvailability", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.CheckNameResult(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersCheckNameAvailability method

        function [code, result, response] = clustersCreateOrUpdate(obj, resourceGroupName, clusterName, subscriptionId, api_version, Cluster, optionals)
            % clustersCreateOrUpdate No summary provided
            % Create or update a Kusto cluster.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   Cluster - The Kusto cluster parameters supplied to the CreateOrUpdate operation., Type: Cluster
            %       Required properties in the model for this call:
            %           sku
            %       Optional properties in the model for this call:
            %           systemData
            %           zones
            %           identity
            %           xproperties
            %           etag
            %
            % Optional name-value parameters:
            %   If_Match - The ETag of the cluster. Omit this value to always overwrite the current cluster. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes., Type: string
            %   If_None_Match - Set to ''*'' to allow a new cluster to be created, but to prevent updating an existing cluster. Other values will result in a 412 Pre-condition Failed response., Type: string
            %
            % Responses:
            %   200: Successfully updated the Cluster.
            %   201: Successfully created the cluster.
            %   0: Error response describing why the operation failed.
            %
            % Returns: Cluster
            %
            % See Also: adx.control.models.Cluster

            arguments
              obj adx.control.api.Clusters
              resourceGroupName string
              clusterName string
              subscriptionId string
              api_version string
              Cluster adx.control.models.Cluster
              optionals.If_Match string
              optionals.If_None_Match string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersCreateOrUpdate:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersCreateOrUpdate")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:clustersCreateOrUpdate:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersCreateOrUpdate")
            end
            
            % Add header parameters
            if isfield(optionals,"If_Match"), request.Header(end+1) = matlab.net.http.HeaderField('If-Match', optionals.If_Match); end
            if isfield(optionals,"If_None_Match"), request.Header(end+1) = matlab.net.http.HeaderField('If-None-Match', optionals.If_None_Match); end

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
                "sku",...
            ];
            optionalProperties = [...
                "systemData",...
                "zones",...
                "identity",...
                "xproperties",...
                "etag",...
            ];
            request.Body(1).Payload = Cluster.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersCreateOrUpdate", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersCreateOrUpdate", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.Cluster(response.Body.Data);
                case 201
                    result = adx.control.models.Cluster(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersCreateOrUpdate method

        function [code, result, response] = clustersDelete(obj, resourceGroupName, clusterName, subscriptionId, api_version)
            % clustersDelete No summary provided
            % Deletes a Kusto cluster.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK -- cluster deleted successfully.
            %   202: Accepted the delete cluster request.
            %   204: NoContent -- cluster does not exist in the subscription.
            %   0: Error response describing why the operation failed.
            %
            % Returns: 
            %
            % See Also: adx.control.models.

            arguments
              obj adx.control.api.Clusters
              resourceGroupName string
              clusterName string
              subscriptionId string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersDelete:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersDelete")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('DELETE');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersDelete", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersDelete", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 202
                    result = response.Body.Data;
                case 204
                    result = response.Body.Data;
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersDelete method

        function [code, result, response] = clustersDetachFollowerDatabases(obj, resourceGroupName, clusterName, subscriptionId, api_version, FollowerDatabaseDefinition)
            % clustersDetachFollowerDatabases No summary provided
            % Detaches all followers of a database owned by this cluster.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   FollowerDatabaseDefinition - The follower databases properties to remove., Type: FollowerDatabaseDefinition
            %       Required properties in the model for this call:
            %           clusterResourceId
            %           attachedDatabaseConfigurationName
            %       Optional properties in the model for this call:
            %           databaseName
            %           tableLevelSharingProperties
            %           databaseShareOrigin
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK.
            %   202: Accepted
            %   0: Error response describing why the operation failed.
            %
            % Returns: 
            %
            % See Also: adx.control.models.

            arguments
              obj adx.control.api.Clusters
              resourceGroupName string
              clusterName string
              subscriptionId string
              api_version string
              FollowerDatabaseDefinition adx.control.models.FollowerDatabaseDefinition
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersDetachFollowerDatabases:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersDetachFollowerDatabases")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:clustersDetachFollowerDatabases:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersDetachFollowerDatabases")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/detachFollowerDatabases";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
                "clusterResourceId",...
                "attachedDatabaseConfigurationName",...
            ];
            optionalProperties = [...
                "databaseName",...
                "tableLevelSharingProperties",...
                "databaseShareOrigin",...
            ];
            request.Body(1).Payload = FollowerDatabaseDefinition.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersDetachFollowerDatabases", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersDetachFollowerDatabases", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 202
                    result = response.Body.Data;
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersDetachFollowerDatabases method

        function [code, result, response] = clustersDiagnoseVirtualNetwork(obj, resourceGroupName, clusterName, subscriptionId, api_version)
            % clustersDiagnoseVirtualNetwork No summary provided
            % Diagnoses network connectivity status for external resources on which the service is dependent on.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK.
            %   202: Accepted
            %   0: Error response describing why the operation failed.
            %
            % Returns: DiagnoseVirtualNetworkResult
            %
            % See Also: adx.control.models.DiagnoseVirtualNetworkResult

            arguments
              obj adx.control.api.Clusters
              resourceGroupName string
              clusterName string
              subscriptionId string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersDiagnoseVirtualNetwork:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersDiagnoseVirtualNetwork")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/diagnoseVirtualNetwork";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersDiagnoseVirtualNetwork", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersDiagnoseVirtualNetwork", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.DiagnoseVirtualNetworkResult(response.Body.Data);
                case 202
                    result = response.Body.Data;
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersDiagnoseVirtualNetwork method

        function [code, result, response] = clustersGet(obj, resourceGroupName, clusterName, subscriptionId, api_version)
            % clustersGet No summary provided
            % Gets a Kusto cluster.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: The Kusto cluster.
            %   0: Error response describing why the operation failed.
            %
            % Returns: Cluster
            %
            % See Also: adx.control.models.Cluster

            arguments
              obj adx.control.api.Clusters
              resourceGroupName string
              clusterName string
              subscriptionId string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersGet:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersGet")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersGet", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersGet", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.Cluster(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersGet method

        function [code, result, response] = clustersList(obj, subscriptionId, api_version)
            % clustersList No summary provided
            % Lists all Kusto clusters within a subscription.
            %
            % Required parameters:
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK.
            %   0: Error response describing why the operation failed.
            %
            % Returns: ClusterListResult
            %
            % See Also: adx.control.models.ClusterListResult

            arguments
              obj adx.control.api.Clusters
              subscriptionId string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersList:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersList")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/providers/Microsoft.Kusto/clusters";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersList", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersList", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.ClusterListResult(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersList method

        function [code, result, response] = clustersListByResourceGroup(obj, resourceGroupName, subscriptionId, api_version)
            % clustersListByResourceGroup No summary provided
            % Lists all Kusto clusters within a resource group.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK.
            %   0: Error response describing why the operation failed.
            %
            % Returns: ClusterListResult
            %
            % See Also: adx.control.models.ClusterListResult

            arguments
              obj adx.control.api.Clusters
              resourceGroupName string
              subscriptionId string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersListByResourceGroup:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersListByResourceGroup")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersListByResourceGroup", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersListByResourceGroup", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.ClusterListResult(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersListByResourceGroup method

        function [code, result, response] = clustersListFollowerDatabases(obj, resourceGroupName, clusterName, subscriptionId, api_version)
            % clustersListFollowerDatabases No summary provided
            % Returns a list of databases that are owned by this cluster and were followed by another cluster.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successfully retrieved the list of followed databases.
            %   0: Error response describing why the operation failed.
            %
            % Returns: FollowerDatabaseListResult
            %
            % See Also: adx.control.models.FollowerDatabaseListResult

            arguments
              obj adx.control.api.Clusters
              resourceGroupName string
              clusterName string
              subscriptionId string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersListFollowerDatabases:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersListFollowerDatabases")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/listFollowerDatabases";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersListFollowerDatabases", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersListFollowerDatabases", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.FollowerDatabaseListResult(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersListFollowerDatabases method

        function [code, result, response] = clustersListLanguageExtensions(obj, subscriptionId, resourceGroupName, clusterName, api_version)
            % clustersListLanguageExtensions No summary provided
            % Returns a list of language extensions that can run within KQL queries.
            %
            % Required parameters:
            %   subscriptionId - The ID of the target subscription., Type: string
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successfully retrieved the list of language extensions.
            %   0: Error response describing why the operation failed.
            %
            % Returns: LanguageExtensionsList
            %
            % See Also: adx.control.models.LanguageExtensionsList

            arguments
              obj adx.control.api.Clusters
              subscriptionId string
              resourceGroupName string
              clusterName string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersListLanguageExtensions:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersListLanguageExtensions")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/listLanguageExtensions";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersListLanguageExtensions", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersListLanguageExtensions", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.LanguageExtensionsList(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersListLanguageExtensions method

        function [code, result, response] = clustersListSkusByResource(obj, resourceGroupName, clusterName, api_version, subscriptionId)
            % clustersListSkusByResource No summary provided
            % Returns the SKUs available for the provided resource.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK.
            %   0: Error response describing why the operation failed.
            %
            % Returns: ListResourceSkusResult
            %
            % See Also: adx.control.models.ListResourceSkusResult

            arguments
              obj adx.control.api.Clusters
              resourceGroupName string
              clusterName string
              api_version string
              subscriptionId string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersListSkusByResource:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersListSkusByResource")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/skus";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersListSkusByResource", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersListSkusByResource", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.ListResourceSkusResult(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersListSkusByResource method

        function [code, result, response] = clustersMigrate(obj, resourceGroupName, clusterName, subscriptionId, api_version, ClusterMigrateRequest)
            % clustersMigrate No summary provided
            % Migrate data from a Kusto cluster to another cluster.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   ClusterMigrateRequest - The cluster migrate request parameters., Type: ClusterMigrateRequest
            %       Required properties in the model for this call:
            %           clusterResourceId
            %       Optional properties in the model for this call:
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK.
            %   202: Accepted.
            %   0: Error response describing why the operation failed.
            %
            % Returns: 
            %
            % See Also: adx.control.models.

            arguments
              obj adx.control.api.Clusters
              resourceGroupName string
              clusterName string
              subscriptionId string
              api_version string
              ClusterMigrateRequest adx.control.models.ClusterMigrateRequest
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersMigrate:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersMigrate")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:clustersMigrate:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersMigrate")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/migrate";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
                "clusterResourceId",...
            ];
            optionalProperties = [...
            ];
            request.Body(1).Payload = ClusterMigrateRequest.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersMigrate", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersMigrate", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 202
                    result = response.Body.Data;
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersMigrate method

        function [code, result, response] = clustersRemoveLanguageExtensions(obj, subscriptionId, resourceGroupName, clusterName, api_version, LanguageExtensionsList)
            % clustersRemoveLanguageExtensions No summary provided
            % Remove a list of language extensions that can run within KQL queries.
            %
            % Required parameters:
            %   subscriptionId - The ID of the target subscription., Type: string
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   LanguageExtensionsList - The language extensions to remove., Type: LanguageExtensionsList
            %       Required properties in the model for this call:
            %       Optional properties in the model for this call:
            %           value
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK.
            %   202: Accepted
            %   0: Error response describing why the operation failed.
            %
            % Returns: 
            %
            % See Also: adx.control.models.

            arguments
              obj adx.control.api.Clusters
              subscriptionId string
              resourceGroupName string
              clusterName string
              api_version string
              LanguageExtensionsList adx.control.models.LanguageExtensionsList
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersRemoveLanguageExtensions:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersRemoveLanguageExtensions")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:clustersRemoveLanguageExtensions:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersRemoveLanguageExtensions")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/removeLanguageExtensions";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
            ];
            optionalProperties = [...
                "value",...
            ];
            request.Body(1).Payload = LanguageExtensionsList.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersRemoveLanguageExtensions", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersRemoveLanguageExtensions", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 202
                    result = response.Body.Data;
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersRemoveLanguageExtensions method

        function [code, result, response] = clustersStart(obj, resourceGroupName, clusterName, subscriptionId, api_version)
            % clustersStart No summary provided
            % Starts a Kusto cluster.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK.
            %   202: Accepted.
            %   0: Error response describing why the operation failed.
            %
            % Returns: 
            %
            % See Also: adx.control.models.

            arguments
              obj adx.control.api.Clusters
              resourceGroupName string
              clusterName string
              subscriptionId string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersStart:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersStart")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/start";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersStart", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersStart", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 202
                    result = response.Body.Data;
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersStart method

        function [code, result, response] = clustersStop(obj, resourceGroupName, clusterName, subscriptionId, api_version)
            % clustersStop No summary provided
            % Stops a Kusto cluster.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK.
            %   202: Accepted
            %   0: Error response describing why the operation failed.
            %
            % Returns: 
            %
            % See Also: adx.control.models.

            arguments
              obj adx.control.api.Clusters
              resourceGroupName string
              clusterName string
              subscriptionId string
              api_version string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersStop:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersStop")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/stop";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersStop", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersStop", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 202
                    result = response.Body.Data;
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersStop method

        function [code, result, response] = clustersUpdate(obj, resourceGroupName, clusterName, subscriptionId, api_version, ClusterUpdate, optionals)
            % clustersUpdate No summary provided
            % Update a Kusto cluster.
            %
            % Required parameters:
            %   resourceGroupName - The name of the resource group. The name is case insensitive., Type: string
            %   clusterName - The name of the Kusto cluster., Type: string
            %   subscriptionId - The ID of the target subscription., Type: string
            %   api_version - The API version to use for this operation., Type: string
            %   ClusterUpdate - The Kusto cluster parameters supplied to the Update operation., Type: ClusterUpdate
            %       Required properties in the model for this call:
            %       Optional properties in the model for this call:
            %           tags
            %           location
            %           sku
            %           identity
            %           xproperties
            %
            % Optional name-value parameters:
            %   If_Match - The ETag of the cluster. Omit this value to always overwrite the current cluster. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes., Type: string
            %
            % Responses:
            %   200: Successfully updated the Cluster.
            %   201: Successfully updated the cluster.
            %   202: Successfully updated the cluster.
            %   0: Error response describing why the operation failed.
            %
            % Returns: Cluster
            %
            % See Also: adx.control.models.Cluster

            arguments
              obj adx.control.api.Clusters
              resourceGroupName string
              clusterName string
              subscriptionId string
              api_version string
              ClusterUpdate adx.control.models.ClusterUpdate
              optionals.If_Match string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("control:api:clustersUpdate:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersUpdate")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("control:api:clustersUpdate:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","clustersUpdate")
            end
            
            % Add header parameters
            if isfield(optionals,"If_Match"), request.Header(end+1) = matlab.net.http.HeaderField('If-Match', optionals.If_Match); end

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PATCH');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://management.azure.com");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "resourceGroupName" +"}") = resourceGroupName;
            uri.Path(uri.Path == "{" + "clusterName" +"}") = clusterName;
            uri.Path(uri.Path == "{" + "subscriptionId" +"}") = subscriptionId;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("api-version", api_version);
            
            % Set JSON Body
            requiredProperties = [...
            ];
            optionalProperties = [...
                "tags",...
                "location",...
                "sku",...
                "identity",...
                "xproperties",...
            ];
            request.Body(1).Payload = ClusterUpdate.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("clustersUpdate", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("clustersUpdate", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = adx.control.models.Cluster(response.Body.Data);
                case 201
                    result = adx.control.models.Cluster(response.Body.Data);
                case 202
                    result = adx.control.models.Cluster(response.Body.Data);
                otherwise % Default output as specified in spec
                    result = adx.control.models.ErrorResponse(response.Body.Data);
            end
        
        end % clustersUpdate method

    end %methods
end %class


