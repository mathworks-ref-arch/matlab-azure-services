classdef (Abstract) BaseClient < handle & matlab.mixin.CustomDisplay
    % BASECLIENT Base class for RESTful adx services.
    % Includes common initialization and authentication code. Authentication
    % code may have to be manually updated after code generation.
    %
    % This class cannot be instantiated directly, work with classes derived
    % from it to actually interact with the RESTful service.

    % This file is automatically generated using OpenAPI
    % Specification version: 2023-05-02
    % MATLAB Generator for OpenAPI version: 1.0.0
    % (c) 2023 MathWorks Inc.

    properties
        % Base URI to use when calling the API. Allows using a different server
        % than specified in the original API spec.
        serverUri matlab.net.URI

        % HTTPOptions used by all requests.
        httpOptions = matlab.net.http.HTTPOptions;

        % If operation supports multiple authentication methods, specified which
        % method to prefer.
        preferredAuthMethod = string.empty;

        % If Bearer token authentication is used, the token can be supplied
        % here. Note the token is only used if operations are called for which
        % the API explicitly specified that Bearer authentication is supported.
        % If this has not been specified in the spec but most operations do
        % require Bearer authentication consider adding the relevant header to
        % all requests in the preSend method.
        bearerToken = string.empty;

        % If API key authentication is used, the key can be supplied here.
        % Note the key is only used if operations are called for which
        % the API explicitly specified that API key authentication is supported.
        % If this has not been specified in the spec but most operations do
        % require API key authentication consider adding the API key to all
        % requests in the preSend method.
        apiKey = string.empty;

        % If Basic or Digest authentication is supported username/password
        % credentials can be supplied here as matlab.net.http.Credentials. Note
        % these are only actively used if operations are called for which the
        % API spec has specified they require Basic authentication. If this has
        % not been set specified in the spec but most operations do require
        % Basic authentication consider setting the Credentials property in the
        % httpOptions rather than through httpCredentials.
        httpCredentials = matlab.net.http.Credentials.empty;

        apiVersion = "2022-11-11";

        subscriptionId string;

        tenantId string;

        clientId string;

        clientSecret string;

        database string;

        resourceGroup string;

        cluster string;

        ingestCluster string;

        scopes string;

        dataBearerToken = string.empty;

        controlBearerToken = string.empty;
    end

    properties (Constant)
        % Cookie jar. The cookie jar is shared across all Api classes in the
        % same package. All responses are automatically parsed for Set-Cookie
        % headers and cookies are automatically added to the jar. Similarly
        % cookies are added to outgoing requests if there are matching cookies
        % in the jar for the given request. Cookies can also be added manually
        % by calling the setCookies method on the cookies property. The cookie
        % jar is also saved to disk (cookies.mat in the same directory as
        % BaseClient) and reloaded in new MATLAB sessions.
        cookies = adx.control.CookieJar(fileparts(mfilename('fullpath')));
    end

    methods
        function obj = BaseClient(options)
            % adx.control.BaseClient constructor to be called from
            % derived classes to allow setting properties upon construction
            arguments
                options.configFile string
                options.?adx.control.BaseClient
            end
            % If there no specific file supplied as input but there is a
            % JSON file for the package, use that file
            if ~isfield(options,"configFile") && isfile(which("adx.Client.Settings.json"))
                options.configFile = which("adx.Client.Settings.json");
            end
            % If there is a specific configuration file supplied as input
            if isfield(options,"configFile")
                % Load configuration from configuration file
                obj.loadConfigFile(options.configFile);
                % Remove the field to continue overloading any further options
                options = rmfield(options,'configFile');
            end
            % Set/override other parameters provided as input
            for p = string(fieldnames(options))'
                obj.(p) = options.(p);
            end

            if isempty(obj.ingestCluster) || strlength(obj.ingestCluster) == 0
                if isempty(obj.cluster) || strlength(obj.cluster) == 0
                    warning("adx:BaseClient", "Cluster property not set cannot set default ingestCluster");
                else
                    if ~startsWith(obj.cluster, 'https://')
                        error("adx:BaseClient", "Expected cluster to start with 'https://' : %s", obj.cluster);
                    elseif startsWith(obj.cluster, 'https://ingest-')
                        warning("adx:BaseClient", "Not expecting base cluster hostname to start with ingest-: %s", obj.cluster);
                        obj.ingestCluster = obj.cluster;
                    else
                        obj.ingestCluster = strrep(obj.cluster, 'https://', 'https://ingest-');
                        %fprintf('Setting default ingest cluster to: %s\n', obj.ingestCluster')
                    end
                end
            end
        end
    end % public methods

    methods (Access=protected)

        function request = applyCookies(obj, request, uri)
            c = obj.cookies.getCookies(uri);
            if ~isempty(c)
                request = request.addFields(matlab.net.http.field.CookieField(c));
            end
        end

        function setCookies(obj, history)
            cookieInfos = matlab.net.http.CookieInfo.collectFromLog(history);
            if ~isempty(cookieInfos)
                obj.cookies.setCookies(cookieInfos);
            end
        end

        function  [request, httpOptions, uri] = requestAuth(obj, authNames, request, httpOptions, uri)
            % REQUESTAUTH will be called by operations which require
            % authentication. May have to be extended or modified after code
            % generation. For example, authentication methods not present in the
            % service OpenAPI spec or methods not directly supported by the
            % generator will have to be added. Generated logic may also not be
            % 100% correct if the OpenAPI spec contained multiple different
            % authentication methods of the same type.

            % If a preferred authentication method is specified and supported
            % by the operation which called requestAuth, use the preferred
            % otherwise use the first if there are multiple.
            if ~isempty(obj.preferredAuthMethod) && contains(obj.preferredAuthMethod, authNames)
                authName = obj.preferredAuthMethod;
            else
                authName = authNames(1);
            end

            switch lower(authName)
                case {'clientsecret', 'interactivebrowser', 'devicecode', 'managedidentity'}
                    % Supported OAuth modes, calls getOAuthToken and adds returned token as Bearer authorization header.
                    request.Header(end+1) = matlab.net.http.field.AuthorizationField("Authorization","Bearer " + string(obj.getOAuthToken(authName)));
                otherwise
                    error("adx:requestAuth", "Operation requested an authentication method which is not supported")
            end
        end

        function token = getOAuthToken(obj, mode)
            % GETOAUTHTOKEN called by requestAuth to obtain OAuth token.
            %
            % To be customized after code generation.
            %
            % This template method simply returns the bearerToken of the object
            % which is assumed to have been manually set after manually having
            % completed the OAuth flow. Typically this method should be
            % customized to return a properly cached still valid token, refresh
            % an cached expired token just-in-time or perform the entire OAuth
            % flow from the start just-in-time and cache the token.
            %
            % As the exact OAuth flow may vary by OAuth provider, the full
            % authentication flow is not automatically generated and the
            % template method simply returns the bearerToken property.

            % If there is no bearer token set do auth otherwise use the
            % existing token
            % if ~isempty(obj.bearerToken) && strlength(obj.bearerToken) > 0
            %     jwt = mathworks.utils.jwt.JWT(obj.bearerToken);
            %     if jwt.isTimeValid
            %         token = obj.bearerToken;
            %         return;
            %     else
            %         fprintf("Authentication token time invalid (UTC): Expiry: %s, Not Before: %s, updating.\n", string(jwt.expiryTime), string(jwt.notBeforeTime));
            %     end
            % end

            if isprop(obj, 'dataplane') && obj.dataplane
                if ~isempty(obj.dataBearerToken) && strlength(obj.dataBearerToken) > 0
                    jwt = mathworks.utils.jwt.JWT(obj.dataBearerToken);
                    if jwt.isTimeValid
                        token = obj.dataBearerToken;
                        return;
                    else
                        fprintf("Authentication token time invalid (UTC): Not Before: %s, Expiry: %s, Updating.\n", string(jwt.notBeforeTime), string(jwt.expiryTime));
                    end
                end
            else
                if ~isempty(obj.controlBearerToken) && strlength(obj.controlBearerToken) > 0
                    jwt = mathworks.utils.jwt.JWT(obj.controlBearerToken);
                    if jwt.isTimeValid
                        token = obj.controlBearerToken;
                        return;
                    else
                        fprintf("Authentication token time invalid (UTC): Not Before: %s, Expiry: %s, Updating.\n", string(jwt.notBeforeTime), string(jwt.expiryTime));
                    end
                end
            end

            % The code below can be uncommented and then used as a starting
            % point to fully implement the OAuth flows for the flows specified
            % in the API spec.
            if ~(isprop(obj, 'clientId') && strlength(obj.clientId) > 0)
                error("adx:getOAuthToken", "clientId value is not set");
            end
            if ~(isprop(obj, 'tenantId') && strlength(obj.tenantId) > 0)
                error("adx:getOAuthToken", "tenantId value is not set");
            end
            switch lower(mode)
                % Implicit Flow
                % authorizationUrl = "https://login.microsoftonline.com/common/oauth2/authorize";
                % refreshUrl = "";

                % % Scopes defined in spec
                % scopes = [...
                %     "user_impersonation",... % impersonate your user account
                % ];
                % Scopes defined in spec

                case "devicecode"
                    OA2Client = mathworks.utils.msOAuth2Client(obj.tenantId, obj.clientId, 'Method', mode);

                case "clientsecret"
                    if ~(isprop(obj, 'clientSecret') && strlength(obj.clientSecret) > 0)
                        error("adx:getOAuthToken", "clientSecret value is not set");
                    end
                    OA2Client = mathworks.utils.msOAuth2Client(obj.tenantId, obj.clientId, obj.clientSecret, 'Method', mode);

                case "interactivebrowser"
                    serviceMetadataURI = matlab.net.URI(obj.cluster);
                    serviceMetadataURI.Path = 'v1/rest/auth/metadata';
                    OA2Client = mathworks.utils.msOAuth2Client(obj.tenantId, obj.clientId, 'Method', mode, 'ServiceMetadataURI', serviceMetadataURI);

                case "managedidentity"
                    OA2Client = mathworks.utils.msOAuth2Client(obj.tenantId, obj.clientId, 'Method', mode);

                otherwise
                    error("adx:UnknownOAuth", "Operation requested an OAuth flow which was not specified in the OpenAPI spec.");

            end
            if ~isempty(obj.scopes) && strlength(obj.scopes) > 0
                localScopes = obj.scopes;
            else
                if isprop(obj, 'dataplane') && obj.dataplane
                    localScopes = strcat(obj.cluster, '/.default');
                else
                    localScopes = "https://management.core.windows.net/.default";
                end
            end
            %fprintf("adx:azure_auth: Using scope(s): %s\n", localScopes);
            
            token = OA2Client.getToken(localScopes);
            % Check if the returned token belongs to the data plane or control plane
            if isprop(obj, 'dataplane') && obj.dataplane
                if isstruct(token)
                    if isfield(token, 'accessToken') % Client Secret returns a struct
                        token = token.accessToken;
                    elseif isfield(token, 'token') % A plausible return value
                        token = token.token;
                    else
                        error("adx:UnexpectedToken", "An unexpected token struct was returned");
                    end
                end
                obj.dataBearerToken = token;
                mathworks.internal.adx.setDefaultConfigValue('dataBearerToken', token);
            else
                if isstruct(token)
                    if isfield(token, 'accessToken') % Client Secret returns a struct
                        token = token.accessToken;
                    elseif isfield(token, 'token') % A plausible return value
                        token = token.token;
                    else
                        error("adx:UnexpectedToken", "An unexpected token struct was returned");
                    end
                end
                obj.controlBearerToken = token;
                mathworks.internal.adx.setDefaultConfigValue('controlBearerToken', token);
            end
            % Don't set the bearerToken now as we're generally working with two
            % obj.bearerToken = token;
        end

        function [request, httpOptions, uri] = preSend(obj, operationId, request, httpOptions, uri) %#ok<INUSL>
            % PRESEND is called by every operation right before sending the
            % request. This method can for example be customized to add a
            % header to all (or most) requests if needed.
            %
            % If the requests of only a few operations need to be customized
            % it is recommended to modify the generated operation methods
            % in the Api classes themselves rather than modifying preSend.
            %
            % By default the generated preSend does not do anything, it just
            % returns the inputs as is.

            % Set authNames to preferredAuthMethod from the config file
            [request, httpOptions, uri] = requestAuth(obj, obj.preferredAuthMethod, request, httpOptions, uri);
        end

        function response = postSend(obj, operationId, response, request, uri, httpOptions)  %#ok<INUSD,INUSL>
            % POSTSEND is called by every operation right after sending the
            % request. This method can for example be customized to add
            % customized error handling if the API responds to errors in a
            % consistent way.
            %
            % If the responses of only a few operations need to be customized
            % it is recommended to modify the generated operation methods
            % in the Api classes themselves rather than modifying postSend.
            %
            % By default the generated postSend does not do anything, it just
            % returns the response as is.
        end

        function propgrp = getPropertyGroups(obj)
            % Redact properties such that tokens, etc. do not show up
            % in Command Window output
            hide = ["bearerToken", "apiKey","httpCredentials"];
            propgrp = getPropertyGroups@matlab.mixin.CustomDisplay(obj);
            for h = hide
                if isempty(obj.(h))
                    propgrp.PropertyList.(h) = '<unset>';
                else
                    propgrp.PropertyList.(h) = '<redacted>';
                end
            end
        end
    end % protected methods

    methods (Access=private)
        function loadConfigFile(obj, filename)
            % Loads client and http properties from a JSON file
            try
                settings = jsondecode(fileread(filename));
            catch ME
                fprintf("Error, unable able to jsondecode settings file: %s\n", filename);
                rethrow(ME);
            end
            mathworks.internal.adx.validateConfig(settings);
            for f = string(fieldnames(settings))'
                switch f
                    case 'httpOptions'
                        args = namedargs2cell(settings.httpOptions);
                        obj.httpOptions = matlab.net.http.HTTPOptions(args{:});
                    case 'httpCredentials'
                        args = namedargs2cell(settings.httpCredentials);
                        obj.httpCredentials = matlab.net.http.Credentials(args{:});
                    case 'cookies'
                        obj.cookies.load(settings.cookies.path);
                    otherwise
                        obj.(f) = settings.(f);
                end
            end
        end
    end % private methods
end %class
